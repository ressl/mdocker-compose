#!/bin/bash
#
# control multiple docker-compose files
#
# (c) Robert Ressl
#
# versions
# 0.0.1 first release
# 0.1.0 * Add dryrun mode
#       * Add -v, -h, -d options
#       * Change from yes to integer
#       * Options order doesn't matter anymore
# 0.2.0 * Add config file
#       * Add -f, -p options
#       * Check if configuration file and docker-compose project directory exists


## settings

# debug mode
# set -x

# declare
declare -i DRYRUN
declare -i CLEANUP
declare -A CONFIGS

# default
CLEANUP=1
DRYRUN=0

# config
CONFIG_FILENAME='/etc/docker/mdocker-compose.conf'
COMPOSE_PATH='/srv/compose'

## fix

VERSION=0.2.0
PROJECT_NAME="mdocker-compose"
PROJECT_ENTRY="$PROJECT_NAME"
PROJECT="https://github.com/safematix/$PROJECT_NAME"

## functions

version() {
  echo "$PROJECT"
  echo "v$VERSION"
}

showhelp() {
  version
  echo "Usage: $PROJECT_ENTRY command ...[parameters]....
Commands:
  --help, -h               Show this help message.
  --version, -v            Show version info.
  --file, -f               Configuration file.
  --path, -p               Docker-compose project directory.
  --action, -a             Select action of the script.
  --cleanup, -c            Cleanup docker repository from old data.
  --dryrun, -d             Show the command without executing.

Parameters:
  --action, -a             fetch, up, stop, restart, all (fetch & up)
  --file, -f               example /etc/docker/mdocker-compose.conf
  --path, -p               example /srv/compose

Example:
  $PROJECT_ENTRY -a all -c
  "
}

readconfig() {
  if [ ! -f "${CONFIG_FILENAME}" ]; then
    echo "Config file ${CONFIG_FILENAME} not found!"
    exit 1
  fi

  if [ ! -d "${COMPOSE_PATH}" ]; then
    echo "Directory ${COMPOSE_PATH} not found!"
    exit 1
  fi

  while IFS== read -r key value; do
    CONFIGS["$key"]="${value}"
  done < "${CONFIG_FILENAME}"
}

dryrun() {
  if [[ "$DRYRUN" -ne "1" ]]; then
    eval "${@}"
  else
    echo "${@}"
  fi
}

cleanup () {
  if [[ "$CLEANUP" -eq "1" ]]; then
    dryrun docker system prune -a -f
  fi
}

_compose_fetch() {
  for image in ${CONFIGS[images]}; do
    dryrun cd "$COMPOSE_PATH"/"$image"
    dryrun docker-compose --project-directory "$COMPOSE_PATH"/"$image" -f "$COMPOSE_PATH"/"$image"/docker-compose.yml pull
  done
}

_compose_up() {
  for image in ${CONFIGS[images]}; do
    dryrun cd "$COMPOSE_PATH"/"$image"
    dryrun docker-compose --project-directory "$COMPOSE_PATH"/"$image" -f "$COMPOSE_PATH"/"$image"/docker-compose.yml up -d
  done
}

_compose_stop() {
  for image in ${CONFIGS[images]}; do
    dryrun cd "$COMPOSE_PATH"/"$image"
    dryrun docker-compose --project-directory "$COMPOSE_PATH"/"$image" -f "$COMPOSE_PATH"/"$image"/docker-compose.yml stop
  done
}

compose() {
  # show selected images
  echo docker-compose images: ${CONFIGS[images]}

  ACTION=$1

  case "$ACTION" in
    fetch)
      _compose_fetch
      ;;
    up)
      _compose_up
      ;;
    all)
      _compose_fetch
      _compose_up
      ;;
    restart)
      _compose_stop
      _compose_up
      ;;
    stop)
      _compose_stop
      declare -g CLEANUP="no"
      ;;
    *)
      echo "Error"
      exit 1
  esac
}

opts() {
while getopts ":a:cdhvf:p:" opt; do
  case $opt in
    a)
      declare -gi _compose=1
      declare -g _compose_optarg="$OPTARG"
      ;;
    c)
      declare -gi _cleanup=1
      ;;
    d)
      declare -gi DRYRUN=1
      ;;
    h)
      declare -gi _help=1
      ;;
    v)
      declare -gi _version=1
      ;;
    f)
      declare -g CONFIG_FILENAME="${OPTARG}"
      ;;
    p)
      declare -g COMPOSE_PATH="${OPTARG}"
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done
}

main() {
  [[ -z "$1" ]] && showhelp && return
  opts "$@"
  readconfig
  [[ "${_help}" -ne 0 ]] && showhelp && return
  [[ "${_version}" -ne 0 ]] && version && return
  [[ "${_compose}" -ne 0 ]] && compose ${_compose_optarg}
  [[ "${_cleanup}" -ne 0 ]] && cleanup
}

main "$@"
